--version 0.9

CREATE OR REPLACE VIEW report.shortprojectsummary AS
 SELECT DISTINCT project.projectid, project.orgid, form_projectcode(project.number::integer, project.fiscalyear::integer, contactgroup.acronym) AS projectcode, project.title, project.parentprojectid, project.fiscalyear,
 project.number, project.startdate, project.enddate, project.uuid, COALESCE(string_agg(pi.fullname, '; '::text) OVER (PARTITION BY project.projectid), 'No PI listed'::text) AS principalinvestigators, project.shorttitle, project.abstract, project.description
,status   FROM project
   LEFT JOIN projectcontact pc ON project.projectid = pc.projectid AND pc.roletypeid = 7
   LEFT JOIN ( SELECT person.contactid, ((person.firstname::text || ' '::text) || person.lastname::text) || COALESCE(', '::text || cg.name::text, ''::text) AS fullname
      FROM person
   LEFT JOIN ( SELECT contactcontactgroup.groupid, contactcontactgroup.contactid, contactcontactgroup.positionid, contactcontactgroup.contactcontactgroupid, contactcontactgroup.priority, row_number() OVER (PARTITION BY contactcontactgroup.contactid ORDER BY contactcontactgroup.priority) AS rank
              FROM contactcontactgroup) ccg ON person.contactid = ccg.contactid AND ccg.rank = 1
   LEFT JOIN contactgroup cg ON cg.contactid = ccg.groupid) pi USING (contactid)
   JOIN contactgroup ON project.orgid = contactgroup.contactid
   JOIN status ON project_status(project.projectid) = status.statusid;

--insert canceled
INSERT INTO deliverablestatus VALUES (70, 'Canceled', 'Canceled', 'Deliverable or Task has been canceled or superseded by a modification.', NULL);

/* Fixed manually assigned overdue bug. This occurred when a deliverable was assigned the overdue status and
 * the duedate was subsequently modified to a date after the overdue effectivedate.
 * The database will now consider the duedate before applying the overdue status.
 *
 * The database will now use all assigned status records when determining the overall status for a deliverable.
 * Previously, only the statuses assigned under the current agreement were used.
 *
 * Deprecated deliverable.invalid
 */

COMMENT ON COLUMN deliverablemod.invalid IS 'DEPRECATED, Indicates whether deliverable is valid';

CREATE OR REPLACE VIEW deliverableall AS
	SELECT deliverablemod.personid, deliverablemod.deliverableid, deliverablemod.modificationid, deliverablemod.duedate, efd.effectivedate AS receiveddate, deliverablemod.devinterval, deliverablemod.invalid, deliverablemod.publish, deliverablemod.restricted, deliverablemod.accessdescription, deliverablemod.parentmodificationid, deliverablemod.parentdeliverableid, deliverable.deliverabletypeid, deliverable.title, deliverable.description, (EXISTS (SELECT 1 FROM deliverablemod dm WHERE ((dm.parentdeliverableid = deliverablemod.deliverableid) AND (dm.parentmodificationid = deliverablemod.modificationid)))) AS modified, status.status, status.effectivedate, status.deliverablestatusid FROM (((deliverablemod LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.deliverablestatusid, deliverablemodstatus.deliverablemodstatusid, deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate, deliverablemodstatus.comment, deliverablemodstatus.contactid, deliverablestatus.code, deliverablestatus.status, deliverablestatus.description, deliverablestatus.comment FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) status USING (deliverableid)) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.effectivedate, deliverablemodstatus.modificationid, deliverablemodstatus.deliverableid FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) WHERE (deliverablemodstatus.deliverablestatusid = 10) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) efd USING (deliverableid)) JOIN deliverable USING (deliverableid));

CREATE OR REPLACE VIEW deliverablecalendar AS
	SELECT deliverablemod.personid, deliverablemod.deliverableid, deliverablemod.modificationid, deliverablemod.duedate, efd.effectivedate AS receiveddate, deliverable.title, deliverable.description, (((person.firstname)::text || ' '::text) || (person.lastname)::text) AS manager, deliverabletype.type, form_projectcode((project.number)::integer, (project.fiscalyear)::integer, contactgroup.acronym) AS projectcode, modification.projectid, CASE WHEN ((status.status IS NOT NULL) AND (NOT ((status.deliverablestatusid = 0) AND ((('now'::text)::date - deliverablemod.duedate) < 0)))) THEN status.status ELSE 'Not Received'::character varying END AS status, status.effectivedate, COALESCE((status.deliverablestatusid >= 40), false) AS completed FROM ((((((((deliverablemod LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.deliverablestatusid, deliverablemodstatus.deliverablemodstatusid, deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate, deliverablemodstatus.comment, deliverablemodstatus.contactid, deliverablestatus.code, deliverablestatus.status, deliverablestatus.description, deliverablestatus.comment FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) status USING (deliverableid)) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.effectivedate, deliverablemodstatus.deliverableid FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) WHERE (deliverablemodstatus.deliverablestatusid = 10) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) efd USING (deliverableid)) JOIN modification USING (modificationid)) JOIN project USING (projectid)) JOIN contactgroup ON ((project.orgid = contactgroup.contactid))) JOIN deliverable USING (deliverableid)) JOIN cvl.deliverabletype USING (deliverabletypeid)) JOIN person ON ((deliverablemod.personid = person.contactid))) WHERE ((NOT deliverablemod.invalid) AND (NOT (EXISTS (SELECT 1 FROM deliverablemod dm WHERE ((deliverablemod.modificationid = dm.parentmodificationid) AND (deliverablemod.deliverableid = dm.parentdeliverableid))))));

CREATE OR REPLACE VIEW deliverabledue AS
	SELECT DISTINCT ON (dm.duedate, d.deliverableid) dm.duedate, efd.effectivedate AS receiveddate, d.title, d.description, projectlist.projectcode, project.shorttitle AS project, (((personlist.firstname)::text || ' '::text) || (personlist.lastname)::text) AS contact, personlist.priemail AS email, CASE WHEN (status.deliverablestatusid >= 10) THEN 0 WHEN ((status.deliverablestatusid = 0) AND ((('now'::text)::date - dm.duedate) > 0)) THEN ((('now'::text)::date - status.effectivedate) + 1) ELSE (('now'::text)::date - dm.duedate) END AS dayspastdue, modification.projectid, dm.modificationid, d.deliverableid, CASE WHEN ((status.status IS NOT NULL) AND (NOT ((status.deliverablestatusid = 0) AND ((('now'::text)::date - dm.duedate) < 0)))) THEN status.status ELSE 'Not Received'::character varying END AS status, status.effectivedate, COALESCE((status.deliverablestatusid >= 40), false) AS completed FROM ((((((((deliverable d JOIN deliverablemod dm USING (deliverableid)) JOIN modification USING (modificationid)) JOIN projectlist USING (projectid)) JOIN project USING (projectid)) LEFT JOIN (SELECT projectcontact.projectid, projectcontact.contactid, projectcontact.roletypeid, projectcontact.priority, projectcontact.contactprojectcode, projectcontact.partner, projectcontact.projectcontactid FROM projectcontact WHERE (projectcontact.roletypeid = ANY (ARRAY[6, 7]))) projectcontact USING (projectid)) LEFT JOIN personlist USING (contactid)) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.deliverablestatusid, deliverablemodstatus.deliverablemodstatusid, deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate, deliverablemodstatus.comment, deliverablemodstatus.contactid, deliverablestatus.code, deliverablestatus.status, deliverablestatus.description, deliverablestatus.comment FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) status USING (deliverableid)) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.effectivedate, deliverablemodstatus.deliverableid FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) WHERE (deliverablemodstatus.deliverablestatusid = ANY (ARRAY[10, 40])) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.deliverablestatusid, deliverablemodstatus.effectivedate DESC) efd USING (deliverableid)) WHERE ((NOT (d.deliverabletypeid = ANY (ARRAY[4, 7]))) AND (NOT (EXISTS (SELECT 1 FROM deliverablemod dp WHERE ((dm.modificationid = dp.parentmodificationid) AND (dm.deliverableid = dp.parentdeliverableid)))))) ORDER BY dm.duedate, d.deliverableid, projectcontact.roletypeid, projectcontact.priority;

CREATE OR REPLACE VIEW deliverablelist AS
	SELECT deliverablemod.personid, deliverablemod.deliverableid, deliverablemod.modificationid, deliverablemod.duedate, efd.effectivedate AS receiveddate, deliverablemod.devinterval, deliverablemod.invalid, deliverablemod.publish, deliverablemod.restricted, deliverablemod.accessdescription, deliverablemod.parentmodificationid, deliverablemod.parentdeliverableid, deliverable.deliverabletypeid, deliverable.title, deliverable.description, modification.projectid FROM (((deliverablemod LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.effectivedate, deliverablemodstatus.deliverableid FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) WHERE (deliverablemodstatus.deliverablestatusid = 10) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) efd USING (deliverableid)) JOIN deliverable USING (deliverableid)) JOIN modification USING (modificationid)) WHERE ((NOT deliverablemod.invalid) OR (NOT (EXISTS (SELECT 1 FROM deliverablemod dm WHERE ((deliverablemod.modificationid = dm.parentmodificationid) AND (deliverablemod.deliverableid = dm.parentdeliverableid))))));

COMMENT ON VIEW deliverablelist IS 'List of all valid, non-modified deliverables';

CREATE OR REPLACE VIEW task AS
	SELECT deliverablemod.duedate, deliverable.title, efd.effectivedate AS receiveddate, (((person.firstname)::text || ' '::text) || (person.lastname)::text) AS assignee, deliverable.description, deliverablemod.deliverableid, person.contactid, modification.projectid, deliverablemod.modificationid, CASE WHEN (status.deliverablestatusid >= 10) THEN 0 WHEN ((status.deliverablestatusid = 0) AND ((('now'::text)::date - deliverablemod.duedate) > 0)) THEN ((('now'::text)::date - status.effectivedate) + 1) ELSE (('now'::text)::date - deliverablemod.duedate) END AS dayspastdue, CASE WHEN ((status.status IS NOT NULL) AND (NOT ((status.deliverablestatusid = 0) AND ((('now'::text)::date - deliverablemod.duedate) < 0)))) THEN status.status ELSE 'Not Received'::character varying END AS status, status.effectivedate, COALESCE((status.deliverablestatusid >= 40), false) AS completed, projectlist.projectcode FROM ((((((deliverablemod LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.deliverablestatusid, deliverablemodstatus.deliverablemodstatusid, deliverablemodstatus.modificationid, deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate, deliverablemodstatus.comment, deliverablemodstatus.contactid, deliverablestatus.code, deliverablestatus.status, deliverablestatus.description, deliverablestatus.comment FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) status USING (modificationid, deliverableid)) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.effectivedate, deliverablemodstatus.modificationid, deliverablemodstatus.deliverableid FROM (deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) WHERE (deliverablemodstatus.deliverablestatusid = 10) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) efd USING (modificationid, deliverableid)) JOIN deliverable USING (deliverableid)) JOIN person ON ((deliverablemod.personid = person.contactid))) JOIN modification USING (modificationid)) JOIN projectlist USING (projectid)) WHERE ((deliverable.deliverabletypeid = ANY (ARRAY[4, 7])) AND ((NOT deliverablemod.invalid) AND (NOT (EXISTS (SELECT 1 FROM deliverablemod dm WHERE ((deliverablemod.modificationid = dm.parentmodificationid) AND (deliverablemod.deliverableid = dm.parentdeliverableid))))))) ORDER BY deliverablemod.duedate DESC;

COMMENT ON VIEW task IS 'Lists all tasks that are not invalid or modified';

CREATE OR REPLACE VIEW report.noticesent AS
	SELECT DISTINCT ON (dm.duedate, d.deliverableid) dm.duedate, d.title, d.description, notice.code AS lastnotice, deliverablenotice.datesent, projectlist.projectcode, project.shorttitle AS project, (((personlist.firstname)::text || ' '::text) || (personlist.lastname)::text) AS contact, personlist.priemail AS email, (((folist.firstname)::text || ' '::text) || (folist.lastname)::text) AS fofficer, folist.priemail AS foemail, CASE WHEN (status.deliverablestatusid >= 10) THEN 0 WHEN (status.deliverablestatusid = 0) THEN ((('now'::text)::date - status.effectivedate) + 1) ELSE (('now'::text)::date - dm.duedate) END AS dayspastdue, COALESCE(status.status, 'Not Received'::character varying) AS status, modification.projectid, dm.modificationid, d.deliverableid FROM (((((((((((pts.deliverable d JOIN (SELECT deliverablemod.modificationid, deliverablemod.deliverableid, deliverablemod.duedate, deliverablemod.receiveddate, deliverablemod.devinterval, deliverablemod.invalid, deliverablemod.publish, deliverablemod.restricted, deliverablemod.accessdescription, deliverablemod.parentmodificationid, deliverablemod.parentdeliverableid, deliverablemod.personid FROM pts.deliverablemod WHERE ((NOT deliverablemod.invalid) OR (NOT (EXISTS (SELECT 1 FROM pts.deliverablemod dp WHERE ((dp.modificationid = dp.parentmodificationid) AND (dp.deliverableid = dp.parentdeliverableid))))))) dm USING (deliverableid)) JOIN pts.modification USING (modificationid)) JOIN pts.projectlist USING (projectid)) JOIN pts.project USING (projectid)) LEFT JOIN (SELECT projectcontact.projectid, projectcontact.contactid, projectcontact.roletypeid, projectcontact.priority, projectcontact.contactprojectcode, projectcontact.partner, projectcontact.projectcontactid FROM pts.projectcontact WHERE (projectcontact.roletypeid = ANY (ARRAY[7]))) projectcontact USING (projectid)) LEFT JOIN pts.personlist USING (contactid)) LEFT JOIN (SELECT projectcontact.projectid, projectcontact.contactid, projectcontact.roletypeid, projectcontact.priority, projectcontact.contactprojectcode, projectcontact.partner, projectcontact.projectcontactid FROM pts.projectcontact WHERE (projectcontact.roletypeid = 5) ORDER BY projectcontact.priority) focontact USING (projectid)) LEFT JOIN pts.personlist folist ON ((focontact.contactid = folist.contactid))) LEFT JOIN (SELECT DISTINCT ON (deliverablemodstatus.deliverableid) deliverablemodstatus.deliverablestatusid, deliverablemodstatus.deliverablemodstatusid, deliverablemodstatus.modificationid, deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate, deliverablemodstatus.comment, deliverablemodstatus.contactid, deliverablestatus.code, deliverablestatus.status, deliverablestatus.description, deliverablestatus.comment FROM (pts.deliverablemodstatus JOIN cvl.deliverablestatus USING (deliverablestatusid)) ORDER BY deliverablemodstatus.deliverableid, deliverablemodstatus.effectivedate DESC, deliverablemodstatus.deliverablestatusid DESC) status USING (modificationid, deliverableid)) LEFT JOIN pts.deliverablenotice USING (deliverableid)) LEFT JOIN cvl.notice USING (noticeid)) WHERE ((((NOT (d.deliverabletypeid = ANY (ARRAY[4, 7]))) AND (NOT COALESCE((status.deliverablestatusid >= 10), false))) AND (CASE WHEN (status.deliverablestatusid >= 10) THEN 0 WHEN (status.deliverablestatusid = 0) THEN ((('now'::text)::date - status.effectivedate) + 1) ELSE (('now'::text)::date - dm.duedate) END > (-30))) AND (NOT (EXISTS (SELECT 1 FROM pts.deliverablemod d WHERE ((dm.modificationid = d.parentmodificationid) AND (dm.deliverableid = d.parentdeliverableid)))))) ORDER BY dm.duedate, d.deliverableid, projectcontact.roletypeid, projectcontact.priority, deliverablenotice.datesent DESC;

--update auto-invalidated deliverablemod tuples, set to false
--make sure to investigate for any remaining invalid deliverables
UPDATE deliverablemod d
SET invalid = false
WHERE d.invalid AND
 EXISTS ( SELECT 1
    FROM deliverablemod dm
    WHERE d.modificationid = dm.parentmodificationid AND d.deliverableid = dm.parentdeliverableid
);
